{"version":3,"file":"game.js","sources":["../src/ability/AbilityManager.ts","../src/barbarian/BarbarianDiceValues.ts","../src/barbarian/CritBashAbility.ts","../src/barbarian/FortitudeAbility.ts","../src/barbarian/MightyBlowAbility.ts","../src/barbarian/OverpowerAbility.ts","../src/barbarian/RecklessAbility.ts","../src/barbarian/SmackAbility.ts","../src/barbarian/SturdyBlowAbility.ts","../src/barbarian/ThickSkinAbility.ts","../src/barbarian/BarbarianAbilitiesFactory.ts","../src/game/CardExecutor.ts","../src/event/End.ts","../src/event/PickCard.ts","../src/event/SellCard.ts","../src/subscribers/EventType.ts","../src/handler/EndIncomeHandler.ts","../src/phases/IncomePhase.ts","../src/handler/EndUpkeepPhase.ts","../src/phases/UpkeepPhase.ts","../src/handler/EndDiscardHandler.ts","../src/handler/SellCardHandler.ts","../src/phases/DiscardPhase.ts","../src/event/Roll.ts","../src/handler/EndDefensiveHandler.ts","../src/handler/RollHandler.ts","../src/phases/DefensivePhase.ts","../src/handler/EndOffensiveHandler.ts","../src/phases/OffensivePhase.ts","../src/handler/EndMainHandler.ts","../src/handler/PickCardHandler.ts","../src/phases/MainPhase.ts","../src/game/GameController.ts","../src/model/Card.ts","../src/model/CardType.ts","../src/model/CardPile.ts","../src/model/CombatResolver.ts","../src/model/Die.ts","../src/model/DiceManager.ts","../src/model/Player.ts","../src/model/PlayerManager.ts","../src/model/PlayerFactory.ts","../src/subscribers/EventManager.ts","../src/view/AbilitySelector.ts","../src/view/AbilityView.ts","../src/view/DiceView.ts","../src/view/EndButton.ts","../src/view/HeroView.ts","../src/view/PhaseView.ts","../src/view/RollButton.ts","../src/configuration.ts","../src/game.ts"],"sourcesContent":["import { IAbility } from \"./IAbility\";\r\nimport { IAbilityManager } from \"./IAbilityManager\";\r\n\r\nexport class AbilityManager implements IAbilityManager {\r\n    private abilities: Array<IAbility>;\r\n\r\n    constructor(abilities: Array<IAbility>) {\r\n        this.abilities = abilities;\r\n    }\r\n\r\n    get(index: number): IAbility {\r\n        const ability = this.abilities[index];\r\n        if (ability === undefined) {\r\n            throw Error(`${index} does not correspond to an ability in ${this.abilities.map(x => x.getName())}`)\r\n        }\r\n        return ability  \r\n    }\r\n\r\n    getName(index: number): string {\r\n        const ability = this.get(index);\r\n        return ability.getName();\r\n    }\r\n\r\n    getPlayable(diceValues: number[]): boolean[] {\r\n        return this.abilities.map(x => x.isPlayable(diceValues));\r\n    }\r\n\r\n}","export class BarbarianDiceValues {\r\n    private diceValues: number[];\r\n\r\n    constructor(diceValues: number[]) {\r\n        this.diceValues = diceValues;\r\n    }\r\n\r\n    swordCount(): number {\r\n        return this.diceValues.filter(x => x === 1 || x === 2 || x === 3).length\r\n    }\r\n    heartCount(): number {\r\n        return this.diceValues.filter(x => x === 4 || x === 5).length\r\n    }\r\n    starCount(): number {\r\n        return this.diceValues.filter(x => x === 6).length\r\n    }\r\n\r\n    toString(): string[] {\r\n        return this.diceValues.map(x => {\r\n            if (x <= 3) {\r\n                return 'Sword'\r\n            }\r\n            if (x <= 5) {\r\n                return 'Heart'\r\n            }\r\n            return 'Star'\r\n        })\r\n    }\r\n}","import { IAbility } from \"../ability/IAbility\";\r\nimport { IGameController } from \"../game/IGameController\";\r\nimport { BarbarianDiceValues } from \"./BarbarianDiceValues\";\r\n\r\n\r\nexport class CritBashAbility implements IAbility {\r\n    getName(): string {\r\n        return \"Crit Bash\"\r\n    }\r\n\r\n    private calcDmg(dice: BarbarianDiceValues): number {\r\n        if (dice.swordCount() >= 5) {\r\n            return 8;\r\n        }\r\n        if (dice.swordCount() >= 4) {\r\n            return 6;\r\n        }\r\n        if (dice.swordCount() >= 3) {\r\n            return 4;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    isPlayable(diceValues: number[]): boolean {\r\n        const dice = new BarbarianDiceValues(diceValues);\r\n        return dice.swordCount() >= 3;\r\n    }\r\n\r\n    play(controller: IGameController): void {\r\n        const diceValues = controller.dice.getValues();\r\n        const dice = new BarbarianDiceValues(diceValues);\r\n        controller.combatResolver.initialAttack = this.calcDmg(dice);\r\n    }\r\n}","import { IAbility } from \"../ability/IAbility\";\r\nimport { IGameController } from \"../game/IGameController\";\r\nimport { BarbarianDiceValues } from \"./BarbarianDiceValues\";\r\n\r\nexport class FortitudeAbility implements IAbility {\r\n    getName(): string {\r\n        return \"Fortitude\"\r\n    }\r\n\r\n    calcHeal(dice: BarbarianDiceValues): number {\r\n        if (dice.heartCount() >= 5) {\r\n            return 6;\r\n        }\r\n        if (dice.heartCount() >= 4) {\r\n            return 5;\r\n        }\r\n        if (dice.heartCount() >= 3) {\r\n            return 4;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    isPlayable(diceValues: number[]): boolean {\r\n        const dice = new BarbarianDiceValues(diceValues);\r\n        return dice.heartCount() >= 3;\r\n    }\r\n    play(controller: IGameController): void {\r\n        const diceValues = controller.dice.getValues();\r\n        const dice = new BarbarianDiceValues(diceValues);\r\n        const healAmount = this.calcHeal(dice);\r\n        controller.players.getCurrentPlayer().heal(healAmount);\r\n    }\r\n\r\n}","import { IAbility } from \"../ability/IAbility\";\r\nimport { IGameController } from \"../game/IGameController\";\r\nimport { BarbarianDiceValues } from \"./BarbarianDiceValues\";\r\n\r\n\r\nexport class MightyBlowAbility implements IAbility {\r\n    getName(): string {\r\n        return \"Mighty Blow\"\r\n    }\r\n\r\n    private calcDmg(dice: BarbarianDiceValues): number {\r\n        if (dice.swordCount() >= 5) {\r\n            return 8;\r\n        }\r\n        if (dice.swordCount() >= 4) {\r\n            return 6;\r\n        }\r\n        if (dice.swordCount() >= 3) {\r\n            return 4;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    isPlayable(diceValues: number[]): boolean {\r\n        const dice = new BarbarianDiceValues(diceValues);\r\n        return dice.swordCount() >= 3;\r\n    }\r\n\r\n    play(controller: IGameController): void {\r\n        const diceValues = controller.dice.getValues();\r\n        const dice = new BarbarianDiceValues(diceValues);\r\n        controller.combatResolver.initialAttack = this.calcDmg(dice);\r\n    }\r\n}","import { IAbility } from \"../ability/IAbility\";\r\nimport { IGameController } from \"../game/IGameController\";\r\nimport { BarbarianDiceValues } from \"./BarbarianDiceValues\";\r\n\r\nexport class OverpowerAbility implements IAbility {\r\n    getName(): string {\r\n        return \"Overpower\"\r\n    }\r\n\r\n    private calcDmg(dice: BarbarianDiceValues): number {\r\n        return 4\r\n    }\r\n\r\n    isPlayable(diceValues: number[]): boolean {\r\n        const dice = new BarbarianDiceValues(diceValues);\r\n        return dice.swordCount() >= 2 && dice.starCount() >= 2;\r\n    }\r\n\r\n    play(controller: IGameController): void {\r\n        const diceValues = controller.dice.getValues();\r\n        const dice = new BarbarianDiceValues(diceValues);\r\n        controller.combatResolver.initialAttackTrueDmg = this.calcDmg(dice);\r\n    }\r\n\r\n}","import { IAbility } from \"../ability/IAbility\";\r\nimport { IGameController } from \"../game/IGameController\";\r\nimport { BarbarianDiceValues } from \"./BarbarianDiceValues\";\r\n\r\n\r\nexport class RecklessAbility implements IAbility {\r\n    getName(): string {\r\n        return \"Reckless\"\r\n    }\r\n\r\n    private calcDmg(dice: BarbarianDiceValues): number {\r\n        if (dice.swordCount() >= 5) {\r\n            return 8;\r\n        }\r\n        if (dice.swordCount() >= 4) {\r\n            return 6;\r\n        }\r\n        if (dice.swordCount() >= 3) {\r\n            return 4;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    isPlayable(diceValues: number[]): boolean {\r\n        const dice = new BarbarianDiceValues(diceValues);\r\n        return dice.swordCount() >= 3;\r\n    }\r\n\r\n    play(controller: IGameController): void {\r\n        const diceValues = controller.dice.getValues();\r\n        const dice = new BarbarianDiceValues(diceValues);\r\n        controller.combatResolver.initialAttack = this.calcDmg(dice);\r\n    }\r\n}","import { IAbility } from \"../ability/IAbility\";\r\nimport { IGameController } from \"../game/IGameController\";\r\nimport { BarbarianDiceValues } from \"./BarbarianDiceValues\";\r\n\r\n\r\nexport class SmackAbility implements IAbility {\r\n    getName(): string {\r\n        return \"Smack\"\r\n    }\r\n\r\n    private calcDmg(dice: BarbarianDiceValues): number {\r\n        if (dice.swordCount() >= 5) {\r\n            return 8;\r\n        }\r\n        if (dice.swordCount() >= 4) {\r\n            return 6;\r\n        }\r\n        if (dice.swordCount() >= 3) {\r\n            return 4;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    isPlayable(diceValues: number[]): boolean {\r\n        const dice = new BarbarianDiceValues(diceValues);\r\n        return dice.swordCount() >= 3;\r\n    }\r\n\r\n    play(controller: IGameController): void {\r\n        const diceValues = controller.dice.getValues();\r\n        const dice = new BarbarianDiceValues(diceValues);\r\n        controller.combatResolver.initialAttack = this.calcDmg(dice);\r\n    }\r\n}","import { IAbility } from \"../ability/IAbility\";\r\nimport { IGameController } from \"../game/IGameController\";\r\nimport { BarbarianDiceValues } from \"./BarbarianDiceValues\";\r\n\r\nexport class SturdyBlowAbility implements IAbility {\r\n    getName(): string {\r\n        return \"Sturdy Blow\"\r\n    }\r\n\r\n    private calcDmg(dice: BarbarianDiceValues): number {\r\n        return 4\r\n    }\r\n\r\n    isPlayable(diceValues: number[]): boolean {\r\n        const dice = new BarbarianDiceValues(diceValues);\r\n        return dice.swordCount() >= 2 && dice.starCount() >= 2;\r\n    }\r\n\r\n    play(controller: IGameController): void {\r\n        const diceValues = controller.dice.getValues();\r\n        const dice = new BarbarianDiceValues(diceValues);\r\n        controller.combatResolver.initialAttackTrueDmg = this.calcDmg(dice);\r\n    }\r\n\r\n}","import { IAbility } from \"../ability/IAbility\";\r\nimport { IGameController } from \"../game/IGameController\";\r\nimport { BarbarianDiceValues } from \"./BarbarianDiceValues\";\r\n\r\n\r\nexport class ThickSkinAbility implements IAbility {\r\n    getName(): string {\r\n        return \"Thick Skin\"\r\n    }\r\n\r\n    private calcDmg(dice: BarbarianDiceValues): number {\r\n        if (dice.swordCount() >= 5) {\r\n            return 8;\r\n        }\r\n        if (dice.swordCount() >= 4) {\r\n            return 6;\r\n        }\r\n        if (dice.swordCount() >= 3) {\r\n            return 4;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    isPlayable(diceValues: number[]): boolean {\r\n        const dice = new BarbarianDiceValues(diceValues);\r\n        return dice.swordCount() >= 3;\r\n    }\r\n\r\n    play(controller: IGameController): void {\r\n        const diceValues = controller.dice.getValues();\r\n        const dice = new BarbarianDiceValues(diceValues);\r\n        controller.combatResolver.initialAttack = this.calcDmg(dice);\r\n    }\r\n}","import { AbilityManager } from \"../ability/AbilityManager\";\r\nimport { IAbilityManager } from \"../ability/IAbilityManager\";\r\nimport { IFactory } from \"../common/IFactory\";\r\nimport { IGameController } from \"../game/IGameController\";\r\nimport { CritBashAbility } from \"./CritBashAbility\";\r\nimport { FortitudeAbility } from \"./FortitudeAbility\";\r\nimport { MightyBlowAbility } from \"./MightyBlowAbility\";\r\nimport { OverpowerAbility } from \"./OverpowerAbility\";\r\nimport { RecklessAbility } from \"./RecklessAbility\";\r\nimport { SmackAbility } from \"./SmackAbility\";\r\nimport { SturdyBlowAbility } from \"./SturdyBlowAbility\";\r\nimport { ThickSkinAbility } from \"./ThickSkinAbility\";\r\n\r\nexport class BarbarianAbilitiesFactory implements IFactory<IAbilityManager> {\r\n    create(): IAbilityManager {\r\n        const abilities = [\r\n           new SmackAbility(),\r\n           new SturdyBlowAbility(),\r\n           new FortitudeAbility(),\r\n           new OverpowerAbility(),\r\n           new MightyBlowAbility(),\r\n           new CritBashAbility(),\r\n           new RecklessAbility(),\r\n           new ThickSkinAbility(),\r\n        ]\r\n        return new AbilityManager(abilities);\r\n    }\r\n}","import { Card } from \"../model/Card\";\r\nimport { Player } from \"../model/Player\";\r\nimport { ICardExecutor } from \"./ICardExecutor\";\r\n\r\nexport class CardExecutor implements ICardExecutor {\r\n    execute(player: Player, card: Card): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n}","import { IEvent } from \"./IEvent\";\r\n\r\nexport class End implements IEvent {\r\n\r\n}","import { Card } from \"../model/Card\";\r\nimport { IEvent } from \"./IEvent\";\r\n\r\nexport class PickCard implements IEvent {\r\n    index: number;\r\n\r\n    constructor(index: number) {\r\n        this.index = index;\r\n    }\r\n}","import { Card } from \"../model/Card\";\r\nimport { IEvent } from \"./IEvent\";\r\n\r\nexport class SellCard implements IEvent {\r\n    card: Card;\r\n\r\n    constructor(card: Card) {\r\n        this.card = card\r\n    }\r\n}","export enum EventType {\r\n    Roll,\r\n    NewPhase,\r\n    EndCombat,\r\n}","import { End } from \"../event/End\";\r\nimport { IGameController } from \"../game/IGameController\";\r\nimport { IncomePhase } from \"../phases/IncomePhase\";\r\nimport { MainPhase } from \"../phases/MainPhase\";\r\nimport { UpkeepPhase } from \"../phases/UpkeepPhase\";\r\nimport { EventType } from \"../subscribers/EventType\";\r\nimport { IEventHandler } from \"./IEventHandler\";\r\n\r\nexport class EndIncomeHandler implements IEventHandler<End> {\r\n    private controller: IGameController;\r\n\r\n    constructor(controller: IGameController) {\r\n        this.controller = controller;\r\n    }\r\n\r\n    handle(event: End): void {\r\n        this.controller.phase = new MainPhase(this.controller, false);\r\n        this.controller.events.notify(EventType.NewPhase);\r\n    }\r\n}","import { End } from \"../event/End\";\r\nimport { IEvent } from \"../event/IEvent\";\r\nimport { IGameController } from \"../game/IGameController\";\r\nimport { EndIncomeHandler } from \"../handler/EndIncomeHandler\";\r\nimport { IEventHandler } from \"../handler/IEventHandler\";\r\nimport { IPhase } from \"./IPhase\";\r\n\r\nexport class IncomePhase implements IPhase {\r\n    private controller: IGameController;\r\n    private endHandler: IEventHandler<End>;\r\n\r\n    constructor(controller: IGameController) {\r\n        this.controller = controller;\r\n        this.endHandler = new EndIncomeHandler(controller);\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Income Phase\"\r\n    }\r\n\r\n    handle(event: IEvent): void {\r\n        if (event instanceof End) {\r\n            this.endHandler.handle(event);\r\n            return;\r\n        }\r\n    }\r\n}","import { End } from \"../event/End\";\r\nimport { IGameController } from \"../game/IGameController\";\r\nimport { IncomePhase } from \"../phases/IncomePhase\";\r\nimport { UpkeepPhase } from \"../phases/UpkeepPhase\";\r\nimport { EventType } from \"../subscribers/EventType\";\r\nimport { IEventHandler } from \"./IEventHandler\";\r\n\r\nexport class EndUpkeepHandler implements IEventHandler<End> {\r\n    private controller: IGameController;\r\n\r\n    constructor(controller: IGameController) {\r\n        this.controller = controller;\r\n    }\r\n\r\n    handle(event: End): void {\r\n        this.controller.phase = new IncomePhase(this.controller);\r\n        this.controller.events.notify(EventType.NewPhase);\r\n    }\r\n}","import { End } from \"../event/End\";\r\nimport { IEvent } from \"../event/IEvent\";\r\nimport { IGameController } from \"../game/IGameController\";\r\nimport { EndUpkeepHandler } from \"../handler/EndUpkeepPhase\";\r\nimport { IEventHandler } from \"../handler/IEventHandler\";\r\nimport { IPhase } from \"./IPhase\";\r\n\r\nexport class UpkeepPhase implements IPhase {\r\n    private controller: IGameController;\r\n    private endHandler: IEventHandler<End>;\r\n\r\n    constructor(controller: IGameController) {\r\n        this.controller = controller;\r\n        this.endHandler = new EndUpkeepHandler(controller);\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Upkeep Phase\"\r\n    }\r\n\r\n    handle(event: IEvent): void {\r\n        if (event instanceof End) {\r\n            this.endHandler.handle(event);\r\n            return;\r\n        }\r\n    }\r\n}","import { End } from \"../event/End\";\r\nimport { IGameController } from \"../game/IGameController\";\r\nimport { UpkeepPhase } from \"../phases/UpkeepPhase\";\r\nimport { EventType } from \"../subscribers/EventType\";\r\nimport { IEventHandler } from \"./IEventHandler\";\r\n\r\nexport class EndDiscardHandler implements IEventHandler<End> {\r\n    private controller: IGameController;\r\n\r\n    constructor(controller: IGameController) {\r\n        this.controller = controller;\r\n    }\r\n\r\n    handle(event: End): void {\r\n        this.controller.phase = new UpkeepPhase(this.controller);\r\n        this.controller.events.notify(EventType.NewPhase);\r\n    }\r\n}","import { IEvent } from \"../event/IEvent\";\r\nimport { PickCard } from \"../event/PickCard\";\r\nimport { SellCard } from \"../event/SellCard\";\r\nimport { IGameController } from \"../game/IGameController\";\r\nimport { Card } from \"../model/Card\";\r\nimport { Player } from \"../model/Player\";\r\nimport { IEventHandler } from \"./IEventHandler\";\r\n\r\nexport class SellCardHandler implements IEventHandler<SellCard> {\r\n    private controller: IGameController;\r\n\r\n    constructor(controller: IGameController) {\r\n        this.controller = controller;\r\n    }\r\n\r\n    handle(event: SellCard): void {\r\n        let chosenCard = event.card;\r\n        let player = this.controller.players.getCurrentPlayer()\r\n\r\n        if (!this.hasInHand(player, chosenCard)) {\r\n            return;\r\n        }\r\n\r\n        this.discard(player, chosenCard);\r\n    }\r\n\r\n    private hasInHand(player: Player, card: Card): boolean {\r\n        return player.cards.includes(card);\r\n    }\r\n\r\n    private discard(player: Player, card: Card) {\r\n        const index = player.cards.indexOf(card);\r\n        player.cards.splice(index, 1);\r\n    }\r\n}","import { End } from \"../event/End\";\r\nimport { IEvent } from \"../event/IEvent\";\r\nimport { SellCard } from \"../event/SellCard\";\r\nimport { IGameController } from \"../game/IGameController\";\r\nimport { EndDiscardHandler } from \"../handler/EndDiscardHandler\";\r\nimport { IEventHandler } from \"../handler/IEventHandler\";\r\nimport { SellCardHandler } from \"../handler/SellCardHandler\";\r\nimport { EventType } from \"../subscribers/EventType\";\r\nimport { IPhase } from \"./IPhase\";\r\n\r\nexport class DiscardPhase implements IPhase {\r\n    private controller: IGameController;\r\n    private sellCardHandler: IEventHandler<SellCard>;\r\n    private endHandler: IEventHandler<End>;\r\n\r\n    constructor(controller: IGameController) {\r\n        this.controller = controller;\r\n        this.sellCardHandler = new SellCardHandler(controller);\r\n        this.endHandler = new EndDiscardHandler(controller);\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Discard Phase\"\r\n    }\r\n\r\n    handle(event: IEvent): void {\r\n        if (event instanceof SellCard) {\r\n            this.sellCardHandler.handle(event);\r\n            return;\r\n        }\r\n        if (event instanceof End) {\r\n            this.endHandler.handle(event);\r\n            this.controller.events.notify(EventType.NewPhase);\r\n            return;\r\n        }\r\n    }\r\n    \r\n}","import { IEvent } from \"./IEvent\";\r\n\r\nexport class Roll implements IEvent {\r\n    whichDice: boolean[];\r\n\r\n    constructor(whichDice: boolean[]) {\r\n        this.whichDice = whichDice;\r\n    }\r\n}","import { End } from \"../event/End\";\r\nimport { IGameController } from \"../game/IGameController\";\r\nimport { DefensivePhase } from \"../phases/DefensivePhase\";\r\nimport { MainPhase } from \"../phases/MainPhase\";\r\nimport { EventType } from \"../subscribers/EventType\";\r\nimport { IEventHandler } from \"./IEventHandler\";\r\n\r\nexport class EndDefensiveHandler implements IEventHandler<End> {\r\n    private controller: IGameController;\r\n\r\n    constructor(controller: IGameController) {\r\n        this.controller = controller;\r\n    }\r\n\r\n    handle(event: End): void {\r\n        this.controller.phase = new MainPhase(this.controller, true);\r\n        this.controller.events.notify(EventType.NewPhase);\r\n    }\r\n}","import { IEvent } from \"../event/IEvent\";\r\nimport { PickCard } from \"../event/PickCard\";\r\nimport { Roll } from \"../event/Roll\";\r\nimport { SellCard } from \"../event/SellCard\";\r\nimport { IGameController } from \"../game/IGameController\";\r\nimport { Card } from \"../model/Card\";\r\nimport { Player } from \"../model/Player\";\r\nimport { EventType } from \"../subscribers/EventType\";\r\nimport { IEventHandler } from \"./IEventHandler\";\r\n\r\nexport class RollHandler implements IEventHandler<Roll> {\r\n    private controller: IGameController;\r\n\r\n    constructor(controller: IGameController) {\r\n        this.controller = controller;\r\n    }\r\n\r\n    handle(event: Roll): void {\r\n        this.controller.dice.roll(event.whichDice);\r\n        this.controller.events.notify(EventType.Roll);\r\n    }\r\n}","import { End } from \"../event/End\";\r\nimport { IEvent } from \"../event/IEvent\";\r\nimport { Roll } from \"../event/Roll\";\r\nimport { IGameController } from \"../game/IGameController\";\r\nimport { EndDefensiveHandler } from \"../handler/EndDefensiveHandler\";\r\nimport { IEventHandler } from \"../handler/IEventHandler\";\r\nimport { RollHandler } from \"../handler/RollHandler\";\r\nimport { IPhase } from \"./IPhase\";\r\n\r\nexport class DefensivePhase implements IPhase {\r\n    private controller: IGameController;\r\n    // private toggleDieHandler: IEventHandler<ToggleDie>;\r\n    private rollHandler: IEventHandler<Roll>;\r\n    // private chooseAbilityHandler: IEventHandler<ChooseAbility>;\r\n    // private pickCardHandler: IEventHandler<PickCard>;\r\n    private endHandler: IEventHandler<End>;\r\n\r\n    constructor(controller: IGameController) {\r\n        this.controller = controller;\r\n        this.rollHandler = new RollHandler(controller);\r\n        this.endHandler = new EndDefensiveHandler(controller);\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Defensive Phase\"\r\n    }\r\n\r\n    handle(event: IEvent): void {\r\n        if (event instanceof Roll) {\r\n            this.rollHandler.handle(event);\r\n            return;\r\n        }\r\n        // if (event instanceof ChooseAbility) {\r\n        //     this.rollHandler.handle(ChooseAbility);\r\n        //     return;\r\n        // }\r\n        // if (event instanceof PickCard) {\r\n        //     this.pickCardHandler.handle(event);\r\n        //     return;\r\n        // }\r\n        if (event instanceof End) {\r\n            this.endHandler.handle(event);\r\n            return;\r\n        }\r\n    }\r\n}","import { End } from \"../event/End\";\r\nimport { IGameController } from \"../game/IGameController\";\r\nimport { DefensivePhase } from \"../phases/DefensivePhase\";\r\nimport { EventType } from \"../subscribers/EventType\";\r\nimport { IEventHandler } from \"./IEventHandler\";\r\n\r\nexport class EndOffensiveHandler implements IEventHandler<End> {\r\n    private controller: IGameController;\r\n\r\n    constructor(controller: IGameController) {\r\n        this.controller = controller;\r\n    }\r\n\r\n    handle(event: End): void {\r\n        this.controller.phase = new DefensivePhase(this.controller);\r\n        this.controller.events.notify(EventType.NewPhase);\r\n    }\r\n}","import { ChooseAbility } from \"../event/ChooseAbility\";\r\nimport { End } from \"../event/End\";\r\nimport { IEvent } from \"../event/IEvent\";\r\nimport { PickCard } from \"../event/PickCard\";\r\nimport { Roll } from \"../event/Roll\";\r\nimport { ToggleDie } from \"../event/ToggleDie\";\r\nimport { IGameController } from \"../game/IGameController\";\r\nimport { EndOffensiveHandler } from \"../handler/EndOffensiveHandler\";\r\nimport { IEventHandler } from \"../handler/IEventHandler\";\r\nimport { RollHandler } from \"../handler/RollHandler\";\r\nimport { IPhase } from \"./IPhase\";\r\n\r\nexport class OffensivePhase implements IPhase {\r\n    private controller: IGameController;\r\n    // private toggleDieHandler: IEventHandler<ToggleDie>;\r\n    private rollHandler: IEventHandler<Roll>;\r\n    // private chooseAbilityHandler: IEventHandler<ChooseAbility>;\r\n    // private pickCardHandler: IEventHandler<PickCard>;\r\n    private endHandler: IEventHandler<End>;\r\n\r\n    constructor (\r\n        controller: IGameController, \r\n    ) {\r\n        this.controller = controller;\r\n        // this.toggleDieHandler = new ToggleDieHand;\r\n        this.rollHandler = new RollHandler(controller);\r\n        // this.chooseAbilityHandler = chooseAbilityHandler;\r\n        // this.pickCardHandler = pickCardHandler;\r\n        this.endHandler = new EndOffensiveHandler(controller);\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Offensive Phase\"\r\n    }\r\n\r\n    handle(event: IEvent): void {\r\n        // if (event instanceof ToggleDie) {\r\n        //     this.toggleDieHandler.handle(ToggleDie);\r\n        //     return;\r\n        // }\r\n        if (event instanceof Roll) {\r\n            this.rollHandler.handle(event);\r\n            return;\r\n        }\r\n        // if (event instanceof ChooseAbility) {\r\n        //     this.rollHandler.handle(ChooseAbility);\r\n        //     return;\r\n        // }\r\n        // if (event instanceof PickCard) {\r\n        //     this.pickCardHandler.handle(event);\r\n        //     return;\r\n        // }\r\n        if (event instanceof End) {\r\n            this.endHandler.handle(event);\r\n            return;\r\n        }\r\n    }\r\n}","import { End } from \"../event/End\";\r\nimport { IGameController } from \"../game/IGameController\";\r\nimport { DiscardPhase } from \"../phases/DiscardPhase\";\r\nimport { OffensivePhase } from \"../phases/OffensivePhase\";\r\nimport { EventType } from \"../subscribers/EventType\";\r\nimport { IEventHandler } from \"./IEventHandler\";\r\n\r\nexport class EndMainHandler implements IEventHandler<End> {\r\n    private controller: IGameController;\r\n    private hasDoneCombat: boolean;\r\n\r\n    constructor(controller: IGameController, hasDoneCombat: boolean) {\r\n        this.controller = controller;\r\n        this.hasDoneCombat = hasDoneCombat;\r\n    }\r\n\r\n    handle(event: End): void {\r\n        if (this.hasDoneCombat) {\r\n            this.controller.combatResolver.resolve(this.controller);\r\n        }\r\n        this.controller.phase = this.hasDoneCombat? new DiscardPhase(this.controller) : new OffensivePhase(this.controller);\r\n        this.controller.events.notify(EventType.NewPhase);\r\n    }\r\n}","import { IEvent } from \"../event/IEvent\";\r\nimport { PickCard } from \"../event/PickCard\";\r\nimport { IGameController } from \"../game/IGameController\";\r\nimport { Card } from \"../model/Card\";\r\nimport { Player } from \"../model/Player\";\r\nimport { IEventHandler } from \"./IEventHandler\";\r\n\r\nexport class PickCardHandler implements IEventHandler<PickCard> {\r\n    private controller: IGameController;\r\n\r\n    constructor(controller: IGameController) {\r\n        this.controller = controller;\r\n    }\r\n\r\n    handle(event: PickCard): void {\r\n        let player = this.controller.players.getCurrentPlayer()\r\n        let chosenCard = this.getCard(player, event.index);\r\n\r\n        if (chosenCard === undefined || this.cantAfford(player, chosenCard)) {\r\n            return;\r\n        }\r\n\r\n        this.spendCPFor(player, chosenCard);\r\n        this.discard(player, event.index);\r\n\r\n        this.controller.cardExecutor.execute(player, chosenCard)\r\n    }\r\n\r\n    private getCard(player: Player, cardIndex: number): Card | undefined {\r\n        return player.cards[cardIndex];\r\n    }\r\n\r\n    private cantAfford(player: Player, card: Card) {\r\n        return card.cpCost > player.cp;\r\n    }\r\n\r\n    private spendCPFor(player: Player, card: Card): void {\r\n        player.cp -= card.cpCost;\r\n    }\r\n\r\n    private discard(player: Player, cardIndex: number) {\r\n        player.cards.splice(cardIndex, 1);\r\n    }\r\n}","import { End } from \"../event/End\";\r\nimport { IEvent } from \"../event/IEvent\";\r\nimport { PickCard } from \"../event/PickCard\";\r\nimport { SellCard } from \"../event/SellCard\";\r\nimport { IGameController } from \"../game/IGameController\";\r\nimport { EndMainHandler } from \"../handler/EndMainHandler\";\r\nimport { IEventHandler } from \"../handler/IEventHandler\";\r\nimport { PickCardHandler } from \"../handler/PickCardHandler\";\r\nimport { SellCardHandler } from \"../handler/SellCardHandler\";\r\nimport { IPhase } from \"./IPhase\";\r\n\r\n/**\r\n * Main Phase\r\n * display cards to player\r\n * valid events: pick card or sell cards or end turn \r\n * - pick card: hero upgrades or main phase action\r\n */\r\nexport class MainPhase implements IPhase {\r\n    private controller: IGameController;\r\n    private pickCardHandler: IEventHandler<PickCard>;\r\n    private sellCardHandler: IEventHandler<SellCard>;\r\n    private endHandler: IEventHandler<End>;\r\n\r\n    constructor (\r\n        controller: IGameController, \r\n        hasDoneCombat: boolean,\r\n    ) {\r\n        this.controller = controller;\r\n        this.pickCardHandler = new PickCardHandler(this.controller);\r\n        this.sellCardHandler = new SellCardHandler(this.controller);\r\n        this.endHandler = new EndMainHandler(this.controller, hasDoneCombat);\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Main Phase\"\r\n    }\r\n\r\n    handle(event: IEvent): void {\r\n        if (event instanceof PickCard) {\r\n            this.pickCardHandler.handle(event);\r\n            return;\r\n        }\r\n        if (event instanceof SellCard) {\r\n            this.sellCardHandler.handle(event);\r\n            return;\r\n        }\r\n        if (event instanceof End) {\r\n            this.endHandler.handle(event);\r\n            return;\r\n        }\r\n    }\r\n}","import { GameData } from \"../deprecated/GameData\";\r\nimport { IEvent } from \"../event/IEvent\";\r\nimport { ICardPile } from \"../model/ICardPile\";\r\nimport { ICombatResolver } from \"../model/ICombatResolver\";\r\nimport { IDiceManager } from \"../model/IDiceManager\";\r\nimport { IPlayerManager } from \"../model/IPlayerManager\";\r\nimport { IPhase } from \"../phases/IPhase\";\r\nimport { MainPhase } from \"../phases/MainPhase\";\r\nimport { IEventManager } from \"../subscribers/IEventManager\";\r\nimport { ICardExecutor } from \"./ICardExecutor\";\r\nimport { IGameController } from \"./IGameController\";\r\n\r\n/**\r\n * Exposes interfaces to states which do stuff specific to their state\r\n */\r\nexport class GameController implements IGameController {\r\n    players: IPlayerManager;\r\n    dice: IDiceManager;\r\n    cardExecutor: ICardExecutor;\r\n    events: IEventManager;\r\n    combatResolver: ICombatResolver;\r\n    phase: IPhase;\r\n\r\n    constructor(players: IPlayerManager, dice: IDiceManager, cardExecutor: ICardExecutor, events: IEventManager, combatResolver: ICombatResolver) {\r\n        this.players = players;\r\n        this.dice = dice;\r\n        this.cardExecutor = cardExecutor;\r\n        this.events = events\r\n        this.combatResolver = combatResolver;\r\n        this.phase = new MainPhase(this, false);\r\n    }\r\n\r\n    handle(event: IEvent): void {\r\n        this.phase.handle(event);\r\n    }\r\n}","import { CardType } from \"./CardType\";\r\n\r\n/**\r\n * Parameter class for cards\r\n */\r\nexport class Card {\r\n    name: string;\r\n    description: string;\r\n    type: CardType;\r\n    cpCost: number;\r\n\r\n    constructor(name: string, description: string, type: CardType, cpCost: number) {\r\n        this.name = name;\r\n        this.description = description;\r\n        this.type = type;\r\n        this.cpCost = cpCost;\r\n    }\r\n}","export enum CardType {\r\n    /**\r\n     * Can only be played during your own Main Phase (blue)\r\n     */\r\n    HeroUpgrade,\r\n    /**\r\n     * Can only be played during your own Main Phase (blue)\r\n     */\r\n    MainPhaseAction,\r\n    /**\r\n     * Can be played during any player's Offensive / Targeting / Defensive Roll Phases (orange)\r\n     */\r\n    RollPhaseAction,\r\n    AttackModifier,\r\n    /**\r\n     * Can be played at any time. These cards resolve immediately and can't be interrupted (red)\r\n     */\r\n    InstantAction,\r\n}","import { Card } from \"./Card\";\r\nimport { CardType } from \"./CardType\";\r\nimport { ICardPile } from \"./ICardPile\";\r\n\r\nexport class CardPile implements ICardPile {\r\n    private drawPile: Card[];\r\n    private discardPile: Card[];\r\n\r\n    constructor() {\r\n        this.drawPile = this.initDrawPile();\r\n        this.discardPile = [];\r\n    }\r\n\r\n    private initDrawPile(): Card[] {\r\n        const drawPile = [\r\n            new Card(\r\n                \"FEELIN' GOOD!\", \r\n                \"Roll 3 <Dice>:\\nHeal <1Heart> + <2Heart> x <HeartDice>.\", \r\n                CardType.InstantAction, \r\n                0,\r\n            ),\r\n            new Card(\r\n                \"TRANSFERENCE!\",\r\n                \"Transfer 1 status effect token\\nfrom a chosen player to another\\nchosen player.\",\r\n                CardType.MainPhaseAction,\r\n                2,\r\n            ),\r\n            new Card(\r\n                \"WHAT STATUS EFFECTS?\",\r\n                \"Remove all status effect tokens\\nfrom a chosen player\",\r\n                CardType.MainPhaseAction,\r\n                2,\r\n            ),\r\n            new Card(\r\n                \"VEGAS BABY!\",\r\n                \"Roll 1 <Dice>:\\nGame 1/2 the value as <CP>\\n(rounded up).\",\r\n                CardType.MainPhaseAction,\r\n                0,\r\n            ),\r\n            new Card(\r\n                \"GET THAT OUTA HERE!\",\r\n                \"Remove a status effect\\ntoken from a chosen player.\",\r\n                CardType.MainPhaseAction,\r\n                1,\r\n            ),\r\n        ]\r\n\r\n        this.shuffle<Card>(drawPile);\r\n        return drawPile;\r\n    }\r\n\r\n    private shuffle<T>(array: Array<T>): void {\r\n        let currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n        // While there remain elements to shuffle...\r\n        while (0 !== currentIndex) {\r\n\r\n            // Pick a remaining element...\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex -= 1;\r\n\r\n            // And swap it with the current element.\r\n            temporaryValue = array[currentIndex];\r\n            array[currentIndex] = array[randomIndex]!;\r\n            array[randomIndex] = temporaryValue!;\r\n        }\r\n    }\r\n\r\n    private reshufflePiles() {\r\n        this.drawPile.push(...this.discardPile);\r\n        this.discardPile = []\r\n        this.shuffle<Card>(this.drawPile);\r\n    }\r\n\r\n    draw(): Card {\r\n        if (this.drawPile.length <= 0) {\r\n            this.reshufflePiles();\r\n        }\r\n        const card = this.drawPile.pop()!;\r\n        this.discardPile.push(card);\r\n        return card;\r\n    }\r\n}","import { IGameController } from \"../game/IGameController\";\r\nimport { ICombatResolver } from \"./ICombatResolver\";\r\n\r\nexport class CombatResolver implements ICombatResolver {\r\n    initialAttack: number;\r\n    initialAttackTrueDmg: number;\r\n    defenseAmount: number;\r\n    record: number[];\r\n\r\n    constructor() {\r\n        this.initialAttack = -1;\r\n        this.initialAttackTrueDmg = -1;\r\n        this.defenseAmount = 0;\r\n        this.record = [];\r\n    }\r\n\r\n    getTotal(): number {\r\n        if (this.initialAttack < 0 || this.defenseAmount < 0) {\r\n            return -1;\r\n        }\r\n\r\n        let total = this.initialAttack - this.defenseAmount;\r\n        if (this.initialAttackTrueDmg > 0) {\r\n            total += this.initialAttackTrueDmg;\r\n        }\r\n        return total;\r\n    }\r\n\r\n    reset(): void {\r\n        if (this.initialAttack >= 0 && this.defenseAmount >= 0) {\r\n            this.record.push(this.getTotal());\r\n        }\r\n        this.initialAttack = -1;\r\n        this.initialAttackTrueDmg = 0;\r\n        this.defenseAmount = -1;\r\n    }\r\n\r\n    getRecord(): number[] {\r\n        return this.record;\r\n    }\r\n\r\n    resolve(controller: IGameController): void {\r\n        const target = controller.players.getCurrentPlayer();\r\n        const totalDmg = this.getTotal();\r\n        target.damage(totalDmg);\r\n        this.reset();\r\n    }\r\n\r\n}","const DIE_MIN_VAL = 1\r\nconst DIE_MAX_VAL = 6\r\n\r\nexport class Die {\r\n    private value: number;\r\n\r\n    constructor() {\r\n        this.value = -1;\r\n    }\r\n\r\n    getValue(): number {\r\n        return this.value;\r\n    }\r\n\r\n    roll(): void {\r\n        this.value = Math.floor(Math.random() * DIE_MAX_VAL) + DIE_MIN_VAL;\r\n    }\r\n}","import { Die } from \"./Die\";\r\nimport { IDiceManager } from \"./IDiceManager\";\r\n\r\nconst NUM_DICE = 6;\r\n\r\nexport class DiceManager implements IDiceManager {\r\n    private dice: Array<Die>\r\n\r\n    constructor() {\r\n        this.dice = Array.from({ length: NUM_DICE }, () => new Die());\r\n    }\r\n\r\n    getValues(): number[] {\r\n        return this.dice.map(x => x.getValue())\r\n    }\r\n\r\n    roll(whichDice: boolean[]): void {\r\n        if (whichDice.length != NUM_DICE) {\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < whichDice.length; i++) {\r\n            if (whichDice[i]) {\r\n                this.dice[i]!.roll();\r\n            }\r\n        }\r\n    }\r\n}","import { IAbilityManager } from \"../ability/IAbilityManager\";\r\nimport { Card } from \"./Card\";\r\nimport { ICardPile } from \"./ICardPile\";\r\n\r\nconst PLAYER_MAX_HEALTH = 50;\r\n\r\n/**\r\n * Parameter class for players\r\n */\r\nexport class Player {\r\n    public health: number;\r\n    public cp: number;\r\n    public cards: Array<Card>;\r\n    public abilities: IAbilityManager;\r\n    public cardPile: ICardPile;\r\n\r\n    constructor(abilities: IAbilityManager, cardPile: ICardPile) {\r\n        this.health = PLAYER_MAX_HEALTH;\r\n        this.cards = [];\r\n        this.cp = 0;\r\n        this.abilities = abilities;\r\n        this.cardPile = cardPile;\r\n    }\r\n\r\n    public heal(amount: number) {\r\n        this.health = Math.min(this.health + amount, PLAYER_MAX_HEALTH);\r\n        console.log(`player heals ${amount} health, ${this.health} hp remaining`)\r\n    }\r\n\r\n    public damage(amount: number) {\r\n        this.health = Math.max(this.health - amount, 0);\r\n        console.log(`player takes ${amount} dmg, ${this.health} hp remaining`)\r\n    }\r\n}","import { IPlayerManager } from \"./IPlayerManager\";\r\nimport { Player } from \"./Player\";\r\n\r\nexport class PlayerManager implements IPlayerManager {\r\n    private players: Array<Player>;\r\n    private whoseTurn: number;\r\n\r\n    constructor(players: Array<Player>, whoseTurn: number) {\r\n        this.players = players;\r\n        this.whoseTurn = whoseTurn;\r\n    }\r\n\r\n    getPlayers(): Player[] {\r\n        return this.players\r\n    }\r\n\r\n    getCurrentPlayer() {\r\n        return this.players[this.whoseTurn]!\r\n    }\r\n}","import { IFactory } from \"../common/IFactory\";\r\nimport { ICardPile } from \"./ICardPile\";\r\nimport { IPlayerManager } from \"./IPlayerManager\";\r\nimport { Player } from \"./Player\";\r\nimport { PlayerManager } from \"./PlayerManager\";\r\n\r\nconst PLAYER_MAX_HEALTH = 50;\r\nconst STARTING_DRAW_CARD_COUNT = 4;\r\n\r\n/**\r\n * Responsible for initializing players and configuring IPlayerManager\r\n */\r\nexport class PlayerFactory implements IFactory<IPlayerManager> {\r\n    private players: Player[];\r\n\r\n    constructor(players: Player[]) {\r\n        this.players = players;\r\n    }\r\n\r\n    initPlayer(player: Player) {\r\n        player.health = PLAYER_MAX_HEALTH;\r\n        for (let i = 0; i < STARTING_DRAW_CARD_COUNT; i++) {\r\n            const card = player.cardPile.draw();\r\n            player.cards.push(card);\r\n        }\r\n        return player\r\n    }\r\n    \r\n    initPlayers() {\r\n        for (const player of this.players) {\r\n            this.initPlayer(player);\r\n        }\r\n    }\r\n\r\n    chooseWhoGoesFirst(players: Player[]): number {\r\n        return Math.floor(Math.random() * players.length);\r\n    }\r\n\r\n    create(): IPlayerManager {\r\n        this.initPlayers();\r\n        const whoseTurn = this.chooseWhoGoesFirst(this.players);\r\n        const playerManager = new PlayerManager(this.players, whoseTurn);\r\n        return playerManager\r\n    }\r\n\r\n}","import { EventType } from \"./EventType\";\r\nimport { IEventManager } from \"./IEventManager\";\r\nimport { ISubscriber } from \"./ISubsriber\";\r\n\r\nexport class EventManager implements IEventManager {\r\n    private subscribers: ISubscriber[];\r\n\r\n    constructor() {\r\n        this.subscribers = []\r\n    }\r\n\r\n    subscribe(subscriber: ISubscriber): void {\r\n        this.subscribers.push(subscriber);\r\n    }\r\n\r\n    unsubscribe(subscriber: ISubscriber): void {\r\n        const subscriberIndex = this.subscribers.indexOf(subscriber);\r\n        if (subscriberIndex > -1) {\r\n            this.subscribers.splice(subscriberIndex, 1);\r\n        }\r\n    }\r\n\r\n    notify(eventType: EventType): void {\r\n        for (const subscriber of this.subscribers) {\r\n            subscriber.notify(eventType);\r\n        }\r\n    }\r\n}","import { IGameController } from \"../game/IGameController\";\r\nimport { OffensivePhase } from \"../phases/OffensivePhase\";\r\nimport { EventType } from \"../subscribers/EventType\";\r\nimport { IAbilitySelector } from \"./IAbilitySelector\";\r\nimport { IAbilityView } from \"./IAbilityView\";\r\n\r\nexport class AbilitySelector implements IAbilitySelector {\r\n    private controller: IGameController;\r\n\r\n    constructor(controller: IGameController) {\r\n        this.controller = controller;\r\n    }\r\n\r\n    select(index: number) {\r\n        const currentPlayer = this.controller.players.getCurrentPlayer();\r\n        const ability = currentPlayer.abilities.get(index);\r\n        console.log(`ability ${index} selected: ${ability.getName()}`);\r\n        ability.play(this.controller);\r\n    }\r\n}","import { IGameController } from \"../game/IGameController\";\r\nimport { OffensivePhase } from \"../phases/OffensivePhase\";\r\nimport { EventType } from \"../subscribers/EventType\";\r\nimport { IAbilityView } from \"./IAbilityView\";\r\n\r\nconst ABILITY_IDS = [\r\n    \"ability1\",\r\n    \"ability2\",\r\n    \"ability3\",\r\n    \"ability4\",\r\n    \"ability5\",\r\n    \"ability6\",\r\n    \"ability7\",\r\n    \"ability8\",\r\n]\r\n\r\nexport class AbilityView implements IAbilityView {\r\n    private controller: IGameController;\r\n\r\n    constructor(controller: IGameController) {\r\n        this.controller = controller;\r\n    }\r\n\r\n    notify(eventType: EventType): void {\r\n        if (eventType === EventType.NewPhase) {\r\n            this.resetHighlight();\r\n        }\r\n        if (eventType !== EventType.Roll) {\r\n            return;\r\n        }\r\n\r\n        if (!(this.controller.phase instanceof OffensivePhase)) {\r\n            return;\r\n        }\r\n        this.highlightPlayable();\r\n    }\r\n\r\n    resetHighlight() {\r\n        for (let id of ABILITY_IDS) {\r\n            let button = document.getElementById(id);\r\n            if (button == null) {\r\n                return;\r\n            }\r\n            button.style.border = '';\r\n        }\r\n    }\r\n\r\n    highlightPlayable() {\r\n        const diceValues = this.controller.dice.getValues();\r\n        const currentPlayer = this.controller.players.getCurrentPlayer()\r\n        const playable = currentPlayer.abilities.getPlayable(diceValues);\r\n\r\n        console.log(\"Playable Abilities:\")\r\n        for (let i = 0; i < playable.length; i++) {\r\n            if (playable[i]) {\r\n                console.log(`${i+1}) ${currentPlayer.abilities.getName(i)}`);\r\n            }\r\n\r\n            this.highlight(ABILITY_IDS[i]!, playable[i]!);\r\n        }\r\n    }\r\n\r\n    highlight(abilityButtonId: string, isPlayable: boolean) {\r\n        let button = document.getElementById(abilityButtonId);\r\n        if (button == null) {\r\n            return;\r\n        }\r\n        if (isPlayable) {\r\n            button.style.border = '2px solid green';\r\n        }\r\n        else {\r\n            button.style.border = '2px solid red';\r\n        }\r\n    }\r\n}","import { BarbarianDiceValues } from \"../barbarian/BarbarianDiceValues\";\r\nimport { IGameController } from \"../game/IGameController\";\r\nimport { EventType } from \"../subscribers/EventType\";\r\nimport { IDiceView } from \"./IDiceView\";\r\n\r\nconst ID_INDEX_MAP: {[key: string]: number} = {\r\n    'dice1': 0,\r\n    'dice2': 1,\r\n    'dice3': 2,\r\n    'dice4': 3,\r\n    'dice5': 4,\r\n    'dice6': 5,\r\n}\r\n\r\n\r\nconst NUM_AS_WORD_MAP: {[num: number]: string} = {\r\n    1: 'one',\r\n    2: 'two',\r\n    3: 'three',\r\n    4: 'four',\r\n    5: 'five',\r\n    6: 'six',\r\n}\r\n    \r\n    \r\n\r\nexport class DiceView implements IDiceView {\r\n    private controller: IGameController;\r\n    private toggled: Array<boolean>;\r\n\r\n    constructor(controller: IGameController) {\r\n        this.controller = controller;\r\n        this.toggled = [false, false, false, false, false, false];\r\n    }\r\n\r\n    toggleBorder(whichDie: string) {\r\n        var element = document.getElementById(whichDie);\r\n        var index = ID_INDEX_MAP[whichDie];\r\n        if (element == null || index == undefined) {\r\n            return;\r\n        }\r\n\r\n        if(element.style.border) {\r\n            element.style.border = \"\";\r\n            element.style.padding = \"\";\r\n            element.style.borderRadius = \"\";\r\n            this.toggled[index] = false;\r\n        } else {\r\n            element.style.border = \"2px solid red\";\r\n            element.style.paddingBlock = \"2px\";\r\n            element.style.paddingInline = \"4px\"\r\n            element.style.borderRadius = \"10px\";\r\n            this.toggled[index] = true;\r\n        }\r\n    }\r\n\r\n    click(whichDie: string) {\r\n        console.log(\"%s clicked\", whichDie);\r\n        this.toggleBorder(whichDie);\r\n    }\r\n\r\n    getToggledDice(): Array<boolean> {\r\n        return this.toggled;\r\n    }\r\n\r\n    set(whichDie: string, num: number): void {\r\n        let element = document.getElementById(whichDie);\r\n        let asWord = NUM_AS_WORD_MAP[num];\r\n        if (asWord == undefined || element == null) {\r\n            return;\r\n        }\r\n\r\n        element.className = `fas fa-dice-${asWord}`\r\n    }\r\n\r\n    notify(eventType: EventType): void {\r\n        if (eventType !== EventType.Roll ) {\r\n            return;\r\n        }\r\n        const diceValues = this.controller.dice.getValues();\r\n        const dice = new BarbarianDiceValues(diceValues);\r\n        \r\n        console.log(`dice has changed!\\n${diceValues}`)\r\n        console.log(dice.toString())\r\n\r\n        for (let id in ID_INDEX_MAP) {\r\n            let index = ID_INDEX_MAP[id];\r\n            if (index == undefined) {\r\n                continue;\r\n            }\r\n            let num = diceValues[index];\r\n            if (num == undefined) {\r\n                continue;\r\n            }\r\n            this.set(id, num);\r\n        }\r\n    }\r\n}","import { End } from \"../event/End\";\r\nimport { IGameController } from \"../game/IGameController\";\r\nimport { IEndButton } from \"./IEndButton\";\r\n\r\nexport class EndButton implements IEndButton {\r\n    private controller: IGameController;\r\n\r\n    constructor(controller: IGameController) {\r\n        this.controller = controller;\r\n    }\r\n\r\n    click(): void {\r\n        const event = new End();\r\n        this.controller.handle(event);\r\n    }\r\n}","import { assert } from \"console\";\r\nimport { IGameController } from \"../game/IGameController\";\r\nimport { MainPhase } from \"../phases/MainPhase\";\r\nimport { EventType } from \"../subscribers/EventType\";\r\nimport { ISubscriber } from \"../subscribers/ISubsriber\";\r\nimport { IHeroView } from \"./IHeroView\";\r\n\r\nconst ABILITY_BUTTON_IDS = [\r\n    \"ability1\",\r\n    \"ability2\",\r\n    \"ability3\",\r\n    \"ability4\",\r\n    \"ability5\",\r\n    \"ability6\",\r\n    \"ability7\",\r\n    \"ability8\",\r\n]\r\n\r\n// setup the ability names, change them when hero changes\r\nexport class HeroView implements IHeroView {\r\n    private controller: IGameController;\r\n\r\n    constructor(controller: IGameController) {\r\n        this.controller = controller;\r\n    }\r\n\r\n    startup() {\r\n        const currentPlayer = this.controller.players.getCurrentPlayer()\r\n        for (let i = 0; i < ABILITY_BUTTON_IDS.length; i++) {\r\n            let abilityId = ABILITY_BUTTON_IDS[i]!;\r\n            let abilityName = currentPlayer.abilities.getName(i);\r\n            this.renameButton(abilityId, abilityName);\r\n        }\r\n    }\r\n\r\n    renameButton(buttonId: string, newName: string) {\r\n        let abilityButton = document.getElementById(buttonId);\r\n        if (abilityButton == null) {\r\n            return;\r\n        }\r\n        abilityButton.textContent = newName;\r\n    }\r\n\r\n    notify(eventType: EventType): void {\r\n        if (eventType !== EventType.NewPhase) {\r\n            return;\r\n        }\r\n\r\n        if (this.controller.phase instanceof MainPhase) {\r\n            console.log(\"Refresh Abilities\");\r\n        }\r\n    }\r\n}","import { IGameController } from \"../game/IGameController\";\r\nimport { EventType } from \"../subscribers/EventType\";\r\nimport { ISubscriber } from \"../subscribers/ISubsriber\";\r\nimport { IPhaseView } from \"./IPhaseView\";\r\n\r\nconst PHASE_VIEW_ID: string = \"phaseView\"\r\n\r\nexport class PhaseView implements IPhaseView {\r\n    private controller: IGameController;\r\n\r\n    constructor(controller: IGameController) {\r\n        this.controller = controller;\r\n    }\r\n\r\n    startup() {\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n        let label = document.getElementById(PHASE_VIEW_ID);\r\n        if (label == null) {\r\n            return;\r\n        }\r\n        let phaseName = this.controller.phase.getName();\r\n        label.textContent = phaseName;\r\n        console.log(phaseName);\r\n    }\r\n\r\n    notify(eventType: EventType): void {\r\n        if (eventType !== EventType.NewPhase) {\r\n            return;\r\n        }\r\n        this.refresh();\r\n    }\r\n}","import { Roll } from \"../event/Roll\";\r\nimport { IGameController } from \"../game/IGameController\";\r\nimport { EventType } from \"../subscribers/EventType\";\r\nimport { IRollButton } from \"./IRollButton\";\r\n\r\nexport class RollButton implements IRollButton {\r\n    private controller: IGameController;\r\n\r\n    constructor(controller: IGameController) {\r\n        this.controller = controller;\r\n    }\r\n\r\n    click(whichDice: Array<boolean>): void {\r\n        console.log(\"Roll Clicked! %s\", whichDice)\r\n        this.controller.handle(new Roll(whichDice))\r\n    }\r\n}","import { IAbilityManager } from \"./ability/IAbilityManager\";\r\nimport { BarbarianAbilitiesFactory } from \"./barbarian/BarbarianAbilitiesFactory\";\r\nimport { IFactory } from \"./common/IFactory\";\r\nimport { CardExecutor } from \"./game/CardExecutor\";\r\nimport { GameController } from \"./game/GameController\";\r\nimport { ICardExecutor } from \"./game/ICardExecutor\";\r\nimport { IGameController } from \"./game/IGameController\";\r\nimport { CardPile } from \"./model/CardPile\";\r\nimport { CombatResolver } from \"./model/CombatResolver\";\r\nimport { DiceManager } from \"./model/DiceManager\";\r\nimport { ICardPile } from \"./model/ICardPile\";\r\nimport { ICombatResolver } from \"./model/ICombatResolver\";\r\nimport { IDiceManager } from \"./model/IDiceManager\";\r\nimport { IPlayerManager } from \"./model/IPlayerManager\";\r\nimport { Player } from \"./model/Player\";\r\nimport { PlayerFactory } from \"./model/PlayerFactory\";\r\nimport { EventManager } from \"./subscribers/EventManager\";\r\nimport { IEventManager } from \"./subscribers/IEventManager\";\r\nimport { AbilitySelector } from \"./view/AbilitySelector\";\r\nimport { AbilityView } from \"./view/AbilityView\";\r\nimport { DiceView } from \"./view/DiceView\";\r\nimport { EndButton } from \"./view/EndButton\";\r\nimport { HeroView } from \"./view/HeroView\";\r\nimport { IAbilitySelector } from \"./view/IAbilitySelector\";\r\nimport { IAbilityView } from \"./view/IAbilityView\";\r\nimport { IDiceView } from \"./view/IDiceView\";\r\nimport { IEndButton } from \"./view/IEndButton\";\r\nimport { IHeroView } from \"./view/IHeroView\";\r\nimport { IPhaseView } from \"./view/IPhaseView\";\r\nimport { IRollButton } from \"./view/IRollButton\";\r\nimport { PhaseView } from \"./view/PhaseView\";\r\nimport { RollButton } from \"./view/RollButton\";\r\n\r\nexport class Configuration {\r\n    barbarianCardPile: ICardPile = new CardPile();\r\n    barbarianAbilities: IAbilityManager = new BarbarianAbilitiesFactory().create();\r\n\r\n    players = [\r\n        new Player(this.barbarianAbilities, this.barbarianCardPile),\r\n    ]\r\n    playerFactory: IFactory<IPlayerManager> = new PlayerFactory(this.players);\r\n    playerManager: IPlayerManager = this.playerFactory.create();\r\n\r\n    diceManager: IDiceManager = new DiceManager();\r\n    cardExecutor: ICardExecutor = new CardExecutor();\r\n    eventManager: IEventManager = new EventManager();\r\n    combatResolver: ICombatResolver = new CombatResolver();\r\n    controller: IGameController = new GameController(this.playerManager, this.diceManager, this.cardExecutor, this.eventManager, this.combatResolver);\r\n\r\n\r\n    rollButton: IRollButton = new RollButton(this.controller);\r\n    diceView: IDiceView = new DiceView(this.controller);\r\n\r\n    heroView: IHeroView = new HeroView(this.controller);\r\n    abilityView: IAbilityView = new AbilityView(this.controller);\r\n    abilitySelector: IAbilitySelector = new AbilitySelector(this.controller);\r\n\r\n    phaseView: IPhaseView = new PhaseView(this.controller);\r\n    endButton: IEndButton = new EndButton(this.controller);\r\n\r\n    constructor() {\r\n        this.controller.events.subscribe(this.diceView);\r\n        this.controller.events.subscribe(this.abilityView);\r\n        this.controller.events.subscribe(this.phaseView);\r\n    }\r\n\r\n    // Methods that must be called after document / window loads\r\n    startup() {\r\n        this.heroView.startup();\r\n        this.phaseView.startup();\r\n    }\r\n}","import { Configuration } from './configuration';\r\n\r\nlet config = new Configuration();\r\n\r\nfunction wireDie(id: string, config: Configuration) {\r\n    var button = document.getElementById(id);\r\n    if (button) {\r\n        button.addEventListener(\"click\", () => config.diceView.click(id));\r\n    }\r\n}\r\n\r\nfunction wireRoll(id: string, config: Configuration) {\r\n    // the roll button\r\n    var roll = document.getElementById(id)\r\n    if (roll) {\r\n        roll.addEventListener(\"click\", () => config.rollButton.click(config.diceView.getToggledDice()))\r\n    }\r\n}\r\n\r\nfunction wireVoid(id: string, config: Configuration) {\r\n    // the roll button\r\n    var button = document.getElementById(id)\r\n    if (button) {\r\n        button.addEventListener(\"click\", () => config.endButton.click())\r\n    }\r\n}\r\n\r\nfunction wireAbilitySelect(id: string, num: number, config: Configuration) {\r\n    var button = document.getElementById(id)\r\n    if (button) {\r\n        button.addEventListener(\"click\", () => config.abilitySelector.select(num));\r\n    }\r\n}\r\n\r\nwindow.onload = () => {\r\n    config.startup();\r\n    wireDie('dice1', config);\r\n    wireDie('dice2', config);\r\n    wireDie('dice3', config);\r\n    wireDie('dice4', config);\r\n    wireDie('dice5', config);\r\n    wireDie('dice6', config);\r\n    wireRoll('rollButton', config);\r\n    wireVoid('endButton', config);\r\n    wireAbilitySelect('ability1', 0, config);\r\n    wireAbilitySelect('ability2', 1, config);\r\n    wireAbilitySelect('ability3', 2, config);\r\n    wireAbilitySelect('ability4', 3, config);\r\n    wireAbilitySelect('ability5', 4, config);\r\n    wireAbilitySelect('ability6', 5, config);\r\n    wireAbilitySelect('ability7', 6, config);\r\n    wireAbilitySelect('ability8', 7, config);\r\n}\r\n"],"names":["PLAYER_MAX_HEALTH"],"mappings":"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"}